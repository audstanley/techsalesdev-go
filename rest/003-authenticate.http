@baseUrl = {{$dotenv baseUrl}}

## CREATE A (test) NEW USER (this will create a link for email validation)
## If SMTP is disabled, then you won't actually get an email verification
## You can also create a proper user with 018-signup.http

# WILL BE DEPRECATED
# POST {{baseUrl}}/session/ HTTP/1.1
# content-type: application/json
# WWW-Authentication: upass
# Authorization: none
# x-username: verifiedUser@gmail.com
# x-password: 12345678

###

## INITIAL LOGIN
# @name login
POST {{baseUrl}}/session/ HTTP/1.1
content-type: application/json
WWW-Authentication: upass
Authorization: none
x-username: verifiedUser@gmail.com
x-password: 123456780

###

## SUBSEQUENT Requests
@authToken = {{login.response.headers.Authorization}}

GET {{baseUrl}}/session/ HTTP/1.1
content-type: application/json
WWW-Authentication: token
Authorization: {{authToken}}

{}
###


# EXAMPLE OF AN INITIAL LOGIN FETCH REQUEST USING THE NEW X-USERNAME, X-PASSWORD HEADERS
# THIS IS SAFE - AS LONG AS THE SERVER IS ALWAYS RUNNING SSL.
#
# fetch("https://api.techsales.dev/session/", { 
#     method: "POST", 
#     headers: { 
#         "www-Authentication": "upass", 
#         "Authorization": "none", 
#         "x-username": "verifiedUser@gmail.com", 
#         "x-password": "12345678" 
#     }
# })
#     .then(d => {
#         console.log("www-authentication header response from server:", d.headers.get('www-authentication'))
#         console.log("authorization header response from server:", d.headers.get('authorization'))
#         return d.json()
#     })
#     .then(d => console.log(d))
#     .catch(e => console.log("error", e))